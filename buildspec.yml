version: 0.2

#test ver 2

phases:
  install:
    runtime-versions:
      python: 3.12
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo "Installing Poetry..."
      - pip install poetry
      - export PATH=$PATH:$HOME/.local/bin
      - echo "Exporting Poetry environment..."
      - poetry export -f requirements.txt --output requirements.txt --without-hashes
      - echo "Building project..."
      - poetry build

      # Automated Versioning
      - echo "Setting up version from Git tags..."
      - echo "$(git rev-parse --abbrev-ref HEAD)"
      - echo "$(git rev-parse --short HEAD)"
      - |
        if git describe --tags --match "v[0-9]*" --exact-match HEAD >/dev/null 2>&1; then
          # Exactly matching a tag, use it
          export IMAGE_VERSION=$(git describe --tags --match "v[0-9]*" --exact-match HEAD | sed 's/^v//')
        elif git rev-parse --abbrev-ref HEAD | grep -q 'main\|master'; then
          # On main/master branch, but not exactly on a tag, create a new version
          export LATEST_TAG=$(git describe --tags --match "v[0-9]*" --abbrev=0) git ls-remote --tags origin
          export VERSION_PARTS=($(echo $LATEST_TAG | tr '.' ' '))
          export NEXT_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((VERSION_PARTS[2] + 1))"
          export IMAGE_VERSION=$NEXT_VERSION
        else
          # Not on main/master, use branch name and commit hash
          export BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD | tr '/' '-')
          export COMMIT_HASH=$(git rev-parse --short HEAD)
          export IMAGE_VERSION="${BRANCH_NAME}-${COMMIT_HASH}"
        fi
        echo "$IMAGE_VERSION"

  build:
    commands:
      - echo "Build started on `date`"
      - echo "Running unit tests"
      - poetry run python -m main  # or your test command
      - echo "Building Docker image..."
      - docker build -t $REPOSITORY_URI:$IMAGE_VERSION .

  post_build:
    commands:
      - echo "Tagging Docker image with version $IMAGE_VERSION and 'latest'..."
      - docker tag $REPOSITORY_URI:$IMAGE_VERSION $REPOSITORY_URI:latest
      - echo "Pushing Docker image to ECR with version $IMAGE_VERSION..."
      - docker push $REPOSITORY_URI:$IMAGE_VERSION
      - docker push $REPOSITORY_URI:latest
      - echo "Build completed on `date`" > build.txt
      - echo "$IMAGE_VERSION" >> build.txt  # Append version to log.

env:
  variables:
    AWS_DEFAULT_REGION: "eu-west-2"
    AWS_ACCOUNT_ID: "093380438279"
    REPOSITORY_URI: "093380438279.dkr.ecr.eu-west-2.amazonaws.com/dummy-codebuild-project"

artifacts:
  files:
    - build.txt
